import Head from "next/head";
import { gql } from "__generated__/gql";
import { NextPage, GetServerSideProps } from "next";
import { ProductDetails, useSuspenseQuery } from "components/ProductDetails";
import { Suspense } from "react";
import Link from "next/link";

const GetProductDocument = gql(/* GraphQL */ `
  query GetProduct($id: ID!) {
    product(id: $id) {
      id
      name
      price
    }
  }
`);

interface IProductProps {
  id: string;
}

const Product: NextPage<IProductProps> = ({ id }) => {
  const { data } = useSuspenseQuery(GetProductDocument, {
    variables: {
      id,
    },
  });

  return (
    <>
      <Head>
        <title>{data.product?.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Link href="/">Home</Link>
        <h1>{data.product?.name}</h1>

        <p>Price: {data.product?.price}</p>

        <Suspense fallback={<div>Loading...</div>}>
          <ProductDetails id={id} />
        </Suspense>
      </main>
    </>
  );
};

export default Product;

export const getServerSideProps: GetServerSideProps<IProductProps> = async ({
  query,
}) => {
  if (!query.id || Array.isArray(query.id)) {
    throw new Error("Parameter `id` is not in the correct format");
  }
  return {
    props: {
      id: query.id,
    },
  };
};
